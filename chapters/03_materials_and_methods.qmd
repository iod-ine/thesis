# Materials and methods {#sec-materials-and-methods}

This chapter describes in detail used datasets, processing techniques and the methods used, and comments on the reasoning behind the choices.
Hopefully, by the end of this chapter the reader will be confident in their ability to recreate the framework from scratch.
The code of the project on my GitHub might be a helpful addition for that.

{{< include 03a_lysva_dataset.qmd >}}

{{< include 03b_individual_trees_dataset.qmd >}}

{{< include 03c_synthetic_forest_datasets.qmd >}}

{{< include 03d_training_tree_segmentors.qmd >}}

{{< include 03e_training_segment_processors.qmd >}}

## Matching detections to field inventory ground truth {#sec-matching-algorithm}

To evaluate the results of any tree detection system against field inventory data, an automated and deterministic method for matching detected tree candidates to the ground truth trees is needed.
It should determine which ground truth trees, if any, the detected candidates correspond to.
It should also classify both the trees and the candidates as either a true positive, meaning that the ground truth tree was successfully detected, a false negative, meaning that a ground truth tree was not detected, or a false positive, meaning a tree was detected when there is none.

I use the same matching procedure that is described and implemented in @dubrovinOpenDatasetIndividual2024.
It considers the locations and heights of the trees, and falls back to using only locations when the height is not available for the ground truth tree.
It is parametrized by the maximum allowed 2D distance and the maximum height difference between a detected and a ground truth tree to consider them a match.
First, it constructs a distance matrix between the ground truth tree locations and the detected candidates and filters out the pairs for which the distance is larger than the allowed maximum.
It then iterates over the remaining pairs in the order of increasing distance, and marks the pairs with suitable heights in which both trees are not yet assigned a class as a true positive.
The pairs in which one of the trees is already assigned a class are marked as either a false positive or a false negative, and the pairs in which both trees are assigned a class are skipped.
Finally, it marks all unmatched ground truth trees as false negatives, and all unmatched candidate trees as false positives.

Based on the results of the matching algorithm, a set of metrics that are often used to evaluate the results of tree detection can be calculated.
The same metrics are usually used for evaluation in classification problems and thus are well-known.
The first commonly used metric is recall, which is the proportion of the ground truth trees that were detected.
The second metric is precision, which is the proportion of candidates that are correct.
Both are important, and describe a detection system from different perspectives.
To combine them into a single metric, $F_1$-score is often used, which is the harmonic mean of precision and recall that provide a balanced measure of the system performance.
The formulas for the metrics are as follows:

$$
\text{recall} =
\frac{N_{\text{true positives}}}{N_\text{trees}} =
\frac{N_{\text{true positives}}}{N_{\text{true positives}} + N_{\text{false negatives}}}
$$

$$
\text{precision} =
\frac{N_{\text{true positives}}}{N_\text{candidates}} =
\frac{N_{\text{true positives}}}{N_{\text{true positives}} + N_{\text{false positive}}}
$$

$$
F_1\text{-score} = 2 \times \frac{\text{precision} \times \text{recall}}{\text{precision} + \text{recall}}
$$

Another commonly used metric to evaluate the results of tree detection approaches is the average distance between a detected and a ground truth tree.
This metric, however, has limitations that are important to keep in mind when analyzing the results.
The first important limitation is that its value is limited in how low it can get by the difference in nature of the compared detections and ground truth field inventory.
During the inventory, the trees' coordinates are recorded at their trunks, approximately at breast height, which is almost at the ground level compared to the height of the trees.
The detections, on the other hand, happen with the perspective from above, and correspond to tree tops.
Planar distance between the bottom of the trunk and the top of the canopy can be significant, especially if trees are even slightly tilted, or for broadleaf species with wide and irregular canopies, or both.
So the average distance between predicted trees and their ground truth counterparts will rarely be zero, even for a perfect detection system.
The other limitation it that that distance is also limited from above by the parameters used for the matching algorithm.
As mentioned, one of the parameters is the maximum distance allowed between a candidate and an actual tree to consider them a match.
Thus, the average distance metric is limited from both directions, but in ways that are not immediately obvious.
I do calculate and report it in the results section, but the reader is advised to keep the limitations in mind.

## Application of the framework

The framework is applied in two steps.
First, the tree segmentation network is applied in a sliding window of the same size that was used for patch generation during its training, with overlap to be able to combine the results into a single prediction.
The continuous predictions of the regression model are rounded to get the integer labels for every point.
The results are merged to create a single point cloud, and a postprocessing routine aimed to transform per-window tree IDs to global tree IDs is run.
It traces the overlapping points to find the labels that need to be updated in the later window, and adds a large number to predictions with remaining labels in the later window.
Second, the segments identified by predicted integer labels are extracted, selected feature sets are calculated for each one, and each one is passed through the collection of attribute prediction models to get per-tree predictions.
